name: Build Base Image

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean
  push:
    paths:
      - 'requirements.txt'
      - 'Dockerfile.base'
    branches: [ main ]

env:
  BASE_IMAGE_NAME: cb500-base
  REGISTRY: docker.io

jobs:
  build-base:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if base image exists
        id: check
        run: |
          if docker manifest inspect ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BASE_IMAGE_NAME }}:latest > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "📦 Base image already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🆕 Base image doesn't exist"
          fi

      - name: Build and push base image
        id: build
        if: steps.check.outputs.exists == 'false' || github.event.inputs.force_rebuild == 'true' || github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.base
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BASE_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BASE_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test base image
        if: steps.build.outputs.pushed == 'true'
        run: |
          echo "🧪 Testing base image..."
          docker run --rm ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BASE_IMAGE_NAME }}:latest python -c "
          import playwright
          import aiohttp
          import dataclasses_json
          import dotenv
          print('✅ All dependencies imported successfully')
          print(f'Playwright version: {playwright.__version__}')
          print(f'aiohttp version: {aiohttp.__version__}')
          "

      - name: Update README
        if: steps.build.outputs.pushed == 'true'
        run: |
          echo "📝 Updating documentation..."
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🏗️ Base Image Built Successfully!
          
          **Image Details:**
          - Repository: `${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BASE_IMAGE_NAME }}`
          - Tags: `latest`, `${{ github.sha }}`
          - Size: $(docker images --format "table {{.Size}}" ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BASE_IMAGE_NAME }}:latest | tail -1)
          
          **Next Steps:**
          1. ✅ Base image is ready for fast app builds
          2. 🚀 App builds will now take 20-30 seconds instead of 6 minutes
          3. 🔄 This base only needs rebuilding when `requirements.txt` changes
          
          **Usage in other workflows:**
          - Fast builds will automatically use this base image
          - No manual intervention required
          
          EOF

      - name: Skip message
        if: steps.build.outputs.pushed != 'true' && steps.check.outputs.exists == 'true'
        run: |
          echo "⏭️ **Base image build skipped**" >> $GITHUB_STEP_SUMMARY
          echo "Base image already exists and no changes detected." >> $GITHUB_STEP_SUMMARY
          echo "Use 'force_rebuild: true' to rebuild anyway." >> $GITHUB_STEP_SUMMARY
