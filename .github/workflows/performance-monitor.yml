name: Build Performance Monitor

on:
  workflow_dispatch:
  schedule:
    # Запускаем раз в неделю для мониторинга производительности
    - cron: '0 6 * * 1'  # Понедельник в 6 утра

env:
  IMAGE_NAME: cb500-monitor
  BASE_IMAGE_NAME: cb500-base
  REGISTRY: docker.io

jobs:
  performance-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Test Original Build (No Cache)
        id: original
        run: |
          echo "🐌 Testing original build strategy..."
          start_time=$(date +%s)
          docker buildx build --no-cache -f Dockerfile -t test-original . > /dev/null 2>&1
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "Original build took: ${duration}s"

      - name: Test Microsoft Base Build
        id: microsoft
        run: |
          echo "🐧 Testing Microsoft Playwright base build..."
          start_time=$(date +%s)
          docker buildx build --no-cache -f Dockerfile.fast -t test-microsoft . > /dev/null 2>&1
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "Microsoft base build took: ${duration}s"

      - name: Test Custom Base Build (if exists)
        id: custom
        continue-on-error: true
        run: |
          echo "🚀 Testing custom base build..."
          start_time=$(date +%s)
          docker buildx build -f Dockerfile.superfast -t test-custom . > /dev/null 2>&1
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "Custom base build took: ${duration}s"

      - name: Calculate Savings
        id: savings
        run: |
          original=${{ steps.original.outputs.duration }}
          microsoft=${{ steps.microsoft.outputs.duration }}
          custom=${{ steps.custom.outputs.duration || '0' }}
          
          # Вычисляем экономию времени
          if [ "$microsoft" -gt 0 ]; then
            microsoft_savings=$(( (original - microsoft) * 100 / original ))
            echo "microsoft_savings=$microsoft_savings" >> $GITHUB_OUTPUT
          fi
          
          if [ "$custom" -gt 0 ]; then
            custom_savings=$(( (original - custom) * 100 / original ))
            echo "custom_savings=$custom_savings" >> $GITHUB_OUTPUT
          fi

      - name: Generate Report
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 📊 Build Performance Report
          
          ## ⏱️ Build Times Comparison
          
          | Strategy | Duration | Speed Improvement | Image Size |
          |----------|----------|-------------------|------------|
          | 🐌 Original (Dockerfile) | ${{ steps.original.outputs.duration }}s | Baseline | $(docker images --format "{{.Size}}" test-original 2>/dev/null \|\| echo "N/A") |
          | 🐧 Microsoft Base | ${{ steps.microsoft.outputs.duration }}s | ${{ steps.savings.outputs.microsoft_savings || 'N/A' }}% faster | $(docker images --format "{{.Size}}" test-microsoft 2>/dev/null \|\| echo "N/A") |
          | 🚀 Custom Base | ${{ steps.custom.outputs.duration || 'N/A' }}s | ${{ steps.savings.outputs.custom_savings || 'N/A' }}% faster | $(docker images --format "{{.Size}}" test-custom 2>/dev/null \|\| echo "N/A") |
          
          ## 💡 Recommendations
          
          EOF
          
          # Добавляем рекомендации
          original=${{ steps.original.outputs.duration }}
          microsoft=${{ steps.microsoft.outputs.duration }}
          custom=${{ steps.custom.outputs.duration || '0' }}
          
          if [ "$custom" -gt 0 ] && [ "$custom" -lt 60 ]; then
            echo "✅ **Custom base strategy is optimal** - Build time under 1 minute!" >> $GITHUB_STEP_SUMMARY
          elif [ "$microsoft" -lt 120 ]; then
            echo "🐧 **Microsoft base strategy recommended** - Good balance of speed and simplicity" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Consider optimizing build strategy** - All builds are taking longer than expected" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Time Savings per Build:**" >> $GITHUB_STEP_SUMMARY
          if [ "$microsoft" -gt 0 ]; then
            microsoft_saved=$((original - microsoft))
            echo "- Microsoft base saves: ${microsoft_saved}s per build" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "$custom" -gt 0 ]; then
            custom_saved=$((original - custom))
            echo "- Custom base saves: ${custom_saved}s per build" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup
        if: always()
        run: |
          docker rmi test-original test-microsoft test-custom 2>/dev/null || true
          docker system prune -f
