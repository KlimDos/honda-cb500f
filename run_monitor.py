#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Honda CB500F/CB500X
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from dotenv import load_dotenv
from monitor import CB500Monitor

async def run_full_monitor():
    """–ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    load_dotenv()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Honda CB500F/CB500X")
    print("=" * 50)
    
    data_dir = Path("data")
    cookies_path = Path("cookies.json")
    
    if not cookies_path.exists():
        print("‚ùå –§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    monitor = CB500Monitor(data_dir, cookies_path)
    
    print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(monitor.SEARCH_REGIONS)}")
    for region in monitor.SEARCH_REGIONS:
        print(f"  ‚Ä¢ {region.name}")
    
    print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {', '.join(monitor.SEARCH_QUERIES)}")
    print(f"üí∞ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${monitor.MIN_PRICE:,} - ${monitor.MAX_PRICE:,}")
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await monitor.run_monitor_cycle()
        
        print("\n‚úÖ –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        current_state = monitor.storage.load_current_state()
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(current_state)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        by_region = {}
        for listing in current_state.values():
            region = listing.get('search_region', 'Unknown')
            by_region[region] = by_region.get(region, 0) + 1
        
        print("\nüìç –ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º:")
        for region, count in sorted(by_region.items()):
            print(f"  ‚Ä¢ {region}: {count}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–æ–¥–µ–ª—è–º
        cb500f_count = 0
        cb500x_count = 0
        for listing in current_state.values():
            text = f"{listing.get('title', '')} {listing.get('price_text', '')}".lower()
            if 'cb500x' in text:
                cb500x_count += 1
            elif 'cb500f' in text:
                cb500f_count += 1
        
        print(f"\nüèçÔ∏è –ü–æ –º–æ–¥–µ–ª—è–º:")
        print(f"  ‚Ä¢ CB500F: {cb500f_count}")
        print(f"  ‚Ä¢ CB500X: {cb500x_count}")
        
        # –¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        prices = []
        for listing in current_state.values():
            price = monitor.extract_price(f"{listing.get('title', '')} {listing.get('price_text', '')}")
            if price:
                prices.append(price)
        
        if prices:
            print(f"\nüí∞ –¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: ${sum(prices)/len(prices):,.0f}")
            print(f"  ‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${min(prices):,.0f}")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: ${max(prices):,.0f}")
        
        print(f"\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {data_dir}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(run_full_monitor())