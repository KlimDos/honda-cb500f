#!/usr/bin/env python3
"""
Telegram notifier –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ Honda CB500F/CB500X
"""

import os
import re
import aiohttp
import asyncio
import logging
from typing import Dict, Any, List, Optional

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID', "242426387")
        
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN environment variable not set")
        
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    def _extract_price(self, text: str) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return None
        
        price_matches = re.findall(r'\$(\d{1,2}(?:,\d{3})*|\d{3,6})', text)
        if not price_matches:
            return None
        
        try:
            prices = [float(match.replace(',', '')) for match in price_matches]
            prices = [p for p in prices if 3000 <= p <= 10000]  # –†–∞–∑—É–º–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤
            return max(prices) if prices else None
        except ValueError:
            return None
    
    def _extract_year(self, text: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return None
        
        years = re.findall(r'\b(20(?:1[3-9]|2[0-5]))\b', text)
        return int(years[0]) if years else None
    
    def _format_listing_info(self, listing: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        title = listing.get('title', 'N/A')
        price_text = listing.get('price_text', 'N/A')
        location = listing.get('location', 'N/A')
        listed_date = listing.get('listed_date', 'N/A')
        url = listing.get('url', 'N/A')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏ –≥–æ–¥
        all_text = f"{title} {price_text}"
        price = self._extract_price(all_text)
        year = self._extract_year(all_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
        text_lower = all_text.lower()
        if 'cb500x' in text_lower or 'cb 500x' in text_lower:
            model = "CB500X"
        elif 'cb500f' in text_lower or 'cb 500f' in text_lower:
            model = "CB500F"
        else:
            model = "CB500F/X"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        info_lines = []
        
        if year and price:
            info_lines.append(f"üèç {year} Honda {model} - ${price:,.0f}")
        elif price:
            info_lines.append(f"üèç Honda {model} - ${price:,.0f}")
        else:
            info_lines.append(f"üèç {title}")
            if price_text != title:
                info_lines.append(f"üí∞ {price_text}")
        
        info_lines.append(f"üìç {location}")
        
        if listed_date and listed_date != 'N/A':
            info_lines.append(f"üìÖ {listed_date}")
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        description = listing.get('description', '')
        if description and len(description) > 20:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
            short_desc = description[:100]
            if len(description) > 100:
                short_desc += "..."
            info_lines.append(f"üìù {short_desc}")
        
        return "\n".join(info_lines)
    
    async def _send_message(self, message: str, parse_mode: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"{self.api_url}/sendMessage"
        
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'disable_web_page_preview': False
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if parse_mode:
            data['parse_mode'] = parse_mode
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        logger.info("Message sent successfully")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"Failed to send message: {response.status} - {error_text}")
                        return False
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return False
    
    async def send_new_listing(self, listing: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        info = self._format_listing_info(listing)
        url = listing.get('url', 'N/A')
        
        message = f"""üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

{info}

üîó –°–º–æ—Ç—Ä–µ—Ç—å: {url}"""
        
        return await self._send_message(message)
    
    async def send_removed_listing(self, listing: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        info = self._format_listing_info(listing)
        
        message = f"""‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ

{info}

–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–¥–∞–Ω–æ –∏–ª–∏ —Å–Ω—è—Ç–æ —Å –ø—Ä–æ–¥–∞–∂–∏."""
        
        await self._send_message(message)
    
    async def send_changes_summary(self, changes: List, new_count: int, removed_count: int, price_change_count: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        summary_lines = [
            "üìä –°–í–û–î–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô",
            ""
        ]
        
        if new_count > 0:
            summary_lines.append(f"üÜï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {new_count}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            for change in changes:
                if change.change_type == 'new':
                    listing = change.new_data
                    info = self._format_listing_info(listing)
                    url = listing.get('url', '')
                    summary_lines.append(f"")
                    summary_lines.append(info)
                    summary_lines.append(f"üîó {url}")
        
        if removed_count > 0:
            summary_lines.append(f"")
            summary_lines.append(f"‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {removed_count}")
        
        if price_change_count > 0:
            summary_lines.append(f"")
            summary_lines.append(f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã: {price_change_count}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã
            for change in changes:
                if change.change_type == 'price_change':
                    old_price = self._extract_price(f"{change.old_data.get('title', '')} {change.old_data.get('price_text', '')}")
                    new_price = self._extract_price(f"{change.new_data.get('title', '')} {change.new_data.get('price_text', '')}")
                    
                    if old_price and new_price:
                        direction = "üìà" if new_price > old_price else "üìâ"
                        summary_lines.append(f"{direction} ${old_price:,.0f} ‚Üí ${new_price:,.0f}")
        
        message = "\n".join(summary_lines)
        await self._send_message(message)
    
    async def send_price_change(self, old_listing: Dict[str, Any], new_listing: Dict[str, Any], price_diff: float):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        info = self._format_listing_info(new_listing)
        url = new_listing.get('url', 'N/A')
        
        old_price = self._extract_price(f"{old_listing.get('title', '')} {old_listing.get('price_text', '')}")
        new_price = self._extract_price(f"{new_listing.get('title', '')} {new_listing.get('price_text', '')}")
        
        if old_price and new_price:
            if price_diff > 0:
                direction = "üìà"
                change_text = f"–¶–µ–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ ${abs(price_diff):,.0f}"
            else:
                direction = "üìâ"
                change_text = f"–¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ ${abs(price_diff):,.0f}"
            
            price_line = f"{direction} ${old_price:,.0f} ‚Üí ${new_price:,.0f}"
        else:
            direction = "üîÑ"
            change_text = "–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞"
            price_line = f"–°—Ç–∞—Ä–∞—è: {old_listing.get('price_text', 'N/A')} ‚Üí –ù–æ–≤–∞—è: {new_listing.get('price_text', 'N/A')}"
        
        message = f"""{direction} –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã

{info}

üí∞ {price_line}
üìä {change_text}

üîó –°–º–æ—Ç—Ä–µ—Ç—å: {url}"""
        
        await self._send_message(message)
    
    async def send_daily_summary(self, listings: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"""
        total_count = len(listings)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –º–æ–¥–µ–ª—è–º
        cb500f_count = sum(1 for l in listings if 'cb500f' in f"{l.get('title', '')} {l.get('price_text', '')}".lower())
        cb500x_count = sum(1 for l in listings if 'cb500x' in f"{l.get('title', '')} {l.get('price_text', '')}".lower())
        
        # –¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        prices = []
        for listing in listings:
            price = self._extract_price(f"{listing.get('title', '')} {listing.get('price_text', '')}")
            if price:
                prices.append(price)
        
        price_stats = ""
        if prices:
            avg_price = sum(prices) / len(prices)
            min_price = min(prices)
            max_price = max(prices)
            price_stats = f"""
üí∞ –¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: ${avg_price:,.0f}
   ‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${min_price:,.0f}
   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: ${max_price:,.0f}"""
        
        message = f"""üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞

üèç –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_count}
   ‚Ä¢ CB500F: {cb500f_count}
   ‚Ä¢ CB500X: {cb500x_count}
{price_stats}

üïò –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–π —á–∞—Å"""
        
        await self._send_message(message)
    
    async def send_error(self, error_message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"""‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

{error_message}

–í—Ä–µ–º—è: {asyncio.get_event_loop().time()}"""
        
        await self._send_message(message)
