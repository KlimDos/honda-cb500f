#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö CB500F –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ kubectl exec
"""

import json
import sys
from datetime import datetime
from typing import Dict, List, Any

def format_listing(listing: Dict[str, Any], index: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    listing_id = listing.get('listing_id', 'unknown')
    title = listing.get('title', 'N/A')
    price_text = listing.get('price_text', 'N/A')
    location = listing.get('location', 'N/A')
    search_region = listing.get('search_region', 'N/A')
    search_query = listing.get('search_query', 'N/A')
    url = listing.get('url', 'N/A')
    
    # –í—Ä–µ–º—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    scraped_at = listing.get('scraped_at', 0)
    if scraped_at:
        scraped_time = datetime.fromtimestamp(scraped_at).strftime('%Y-%m-%d %H:%M:%S')
    else:
        scraped_time = 'N/A'
    
    return f"""
{'='*60}
{index}. ID: {listing_id}
   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
   –¶–µ–Ω–∞: {price_text}
   –õ–æ–∫–∞—Ü–∏—è: {location}
   –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞: {search_region}
   –ó–∞–ø—Ä–æ—Å: {search_query}
   –í—Ä–µ–º—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {scraped_time}
   URL: {url[:80]}{'...' if len(url) > 80 else ''}
"""

def show_summary(listings: List[Dict[str, Any]]):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É"""
    total = len(listings)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    regions = {}
    for listing in listings:
        region = listing.get('search_region', 'Unknown')
        regions[region] = regions.get(region, 0) + 1
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
    queries = {}
    for listing in listings:
        query = listing.get('search_query', 'Unknown')
        queries[query] = queries.get(query, 0) + 1
    
    print(f"""
üìä –°–í–û–î–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• CB500F
{'='*50}
–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total}

–ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º:""")
    
    for region, count in sorted(regions.items()):
        print(f"  {region}: {count}")
    
    print("\n–ü–æ –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º:")
    for query, count in sorted(queries.items()):
        print(f"  '{query}': {count}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python view_database.py <json_file_path>")
        print("–ù–∞–ø—Ä–∏–º–µ—Ä: python view_database.py /app/data/current_state.json")
        return
    
    file_path = sys.argv[1]
    show_details = '--detailed' in sys.argv
    
    try:
        # –ß–∏—Ç–∞–µ–º JSON –∏–∑ stdin (–∏–∑ kubectl exec)
        if file_path == '-':
            data = json.load(sys.stdin)
        else:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if isinstance(data, list):
            # –§–æ—Ä–º–∞—Ç current_state.json
            listings = data
            print(f"üìÅ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ({len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)")
        elif isinstance(data, dict) and 'listings' in data:
            # –§–æ—Ä–º–∞—Ç historical data
            listings = data['listings']
            timestamp = data.get('timestamp', 'Unknown')
            count = data.get('count', len(listings))
            print(f"üìÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç {timestamp} ({count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)")
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        show_summary(listings)
        
        if show_details:
            print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –û–ë–™–Ø–í–õ–ï–ù–ò–ô")
            for i, listing in enumerate(listings, 1):
                print(format_listing(listing, i))
        else:
            print(f"\nüí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --detailed")
    
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
