#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
"""

import json
import re
from typing import Dict, List, Any, Optional

def analyze_parsing_quality(listings: List[Dict]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    
    issues = {
        'empty_locations': [],
        'empty_dates': [],
        'malformed_titles': [],
        'price_parsing_issues': [],
        'concatenated_fields': []
    }
    
    stats = {
        'total_listings': len(listings),
        'has_location': 0,
        'has_date': 0,
        'price_extracted_ok': 0,
        'title_clean': 0
    }
    
    for listing in listings:
        listing_id = listing.get('listing_id', 'unknown')
        title = listing.get('title', '')
        price_text = listing.get('price_text', '')
        location = listing.get('location', '')
        listed_date = listing.get('listed_date', '')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ location
        if location.strip():
            stats['has_location'] += 1
        else:
            issues['empty_locations'].append(listing_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ date
        if listed_date.strip():
            stats['has_date'] += 1
        else:
            issues['empty_dates'].append(listing_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ title –Ω–∞ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é
        if len(title) > 100 or ('$' in title and 'honda' in title.lower() and any(c in title for c in [',', 'NY', 'NJ', 'miles'])):
            issues['concatenated_fields'].append({
                'id': listing_id,
                'title': title,
                'suggested_fix': suggest_title_fix(title)
            })
        else:
            stats['title_clean'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã
        extracted_price = extract_price(title + ' ' + price_text)
        if extracted_price > 0:
            stats['price_extracted_ok'] += 1
        else:
            issues['price_parsing_issues'].append({
                'id': listing_id,
                'title': title,
                'price_text': price_text
            })
    
    return {
        'stats': stats,
        'issues': issues,
        'quality_score': calculate_quality_score(stats)
    }

def extract_price(text: str) -> float:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return 0.0
    
    price_matches = re.findall(r'\$(\d{1,2}(?:,\d{3})*|\d{3,6})', text)
    if not price_matches:
        return 0.0
    
    try:
        prices = [float(match.replace(',', '')) for match in price_matches]
        return max(prices) if prices else 0.0
    except ValueError:
        return 0.0

def suggest_title_fix(title: str) -> Dict[str, str]:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–∫–ª–µ–µ–Ω–Ω–æ–≥–æ title"""
    suggestion = {
        'original': title,
        'suggested_title': '',
        'suggested_price': '',
        'suggested_location': '',
        'suggested_year_model': ''
    }
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–∫–ª–µ–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    parts = title.split()
    price_part = ''
    year_model_part = ''
    location_part = ''
    title_part = ''
    
    for i, part in enumerate(parts):
        # –¶–µ–Ω–∞
        if '$' in part:
            price_part += part + ' '
        # –ì–æ–¥ –∏ –º–æ–¥–µ–ª—å
        elif re.match(r'\d{4}', part) or 'honda' in part.lower() or 'cb500' in part.lower():
            year_model_part += part + ' '
        # –õ–æ–∫–∞—Ü–∏—è (—Å–æ–¥–µ—Ä–∂–∏—Ç —à—Ç–∞—Ç—ã –∏–ª–∏ –≥–æ—Ä–æ–¥–∞)
        elif any(state in part.upper() for state in ['NY', 'NJ', 'PA', 'CT', 'MA', 'DE', 'MD', 'VA']) or ',' in part:
            location_part += part + ' '
        # –ú–∏–ª—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        elif 'miles' in part.lower() or 'km' in part.lower():
            title_part += part + ' '
    
    suggestion['suggested_price'] = price_part.strip()
    suggestion['suggested_year_model'] = year_model_part.strip()
    suggestion['suggested_location'] = location_part.strip()
    suggestion['suggested_title'] = (year_model_part + title_part).strip()
    
    return suggestion

def calculate_quality_score(stats: Dict[str, int]) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    total = stats['total_listings']
    if total == 0:
        return 0.0
    
    score = 0.0
    score += (stats['has_location'] / total) * 0.25  # 25% –∑–∞ –ª–æ–∫–∞—Ü–∏—é
    score += (stats['has_date'] / total) * 0.20      # 20% –∑–∞ –¥–∞—Ç—É
    score += (stats['price_extracted_ok'] / total) * 0.30  # 30% –∑–∞ —Ü–µ–Ω—É
    score += (stats['title_clean'] / total) * 0.25   # 25% –∑–∞ —á–∏—Å—Ç–æ—Ç—É title
    
    return score * 100

def generate_improvement_suggestions(analysis: Dict[str, Any]) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    suggestions = []
    issues = analysis['issues']
    
    if issues['empty_locations']:
        suggestions.append(f"üè† –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è {len(issues['empty_locations'])} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        suggestions.append("   - –£–ª—É—á—à–∏—Ç—å regex –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤/—à—Ç–∞—Ç–æ–≤")
        suggestions.append("   - –î–æ–±–∞–≤–∏—Ç—å fallback –ø–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–∏ –≤ description")
    
    if issues['empty_dates']:
        suggestions.append(f"üìÖ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç –¥–ª—è {len(issues['empty_dates'])} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        suggestions.append("   - –†–∞—Å—à–∏—Ä–∏—Ç—å regex –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç")
        suggestions.append("   - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –¥–∞—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
    
    if issues['concatenated_fields']:
        suggestions.append(f"‚úÇÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∫–ª–µ–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è {len(issues['concatenated_fields'])} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        suggestions.append("   - –£–ª—É—á—à–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–æ–ª—è")
        suggestions.append("   - –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    
    if issues['price_parsing_issues']:
        suggestions.append(f"üí∞ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω –¥–ª—è {len(issues['price_parsing_issues'])} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    return suggestions

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CB500F –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Å–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ kubectl)
    sample_data = [
        {
            "listing_id": "1984086672351158",
            "title": "$5,495",
            "price_text": "2023 Honda cb500f",
            "location": "Dover, DE",
            "listed_date": "",
            "scraped_at": 1758055536.0910509
        },
        {
            "listing_id": "1469810090903514",
            "title": "$5,500",
            "price_text": "2022 Honda cb500f",
            "location": "Long Valley, NJ",
            "listed_date": "",
            "scraped_at": 1758055539.1850715
        },
        {
            "listing_id": "1708704936495618",
            "title": "$2,700$3,5002014 Honda cb500fJackson Heights, NY32K miles",
            "price_text": "$2,700$3,5002014 Honda cb500fJackson Heights, NY32K miles",
            "location": "",
            "listed_date": "",
            "scraped_at": 1758055583.894016
        }
    ]
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    analysis = analyze_parsing_quality(sample_data)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"–û–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {analysis['quality_score']:.1f}/100")
    print(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {analysis['stats']['total_listings']}")
    print(f"–° –ª–æ–∫–∞—Ü–∏–µ–π: {analysis['stats']['has_location']}/{analysis['stats']['total_listings']}")
    print(f"–° –¥–∞—Ç–æ–π: {analysis['stats']['has_date']}/{analysis['stats']['total_listings']}")
    print(f"–¶–µ–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞: {analysis['stats']['price_extracted_ok']}/{analysis['stats']['total_listings']}")
    print(f"–ß–∏—Å—Ç—ã–π title: {analysis['stats']['title_clean']}/{analysis['stats']['total_listings']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
    for issue_type, issues in analysis['issues'].items():
        if issues:
            print(f"  {issue_type}: {len(issues)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if analysis['issues']['concatenated_fields']:
        print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∫–ª–µ–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π:")
        for issue in analysis['issues']['concatenated_fields']:
            print(f"\nID: {issue['id']}")
            print(f"–û—Ä–∏–≥–∏–Ω–∞–ª: {issue['title']}")
            fix = issue['suggested_fix']
            print(f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            print(f"  Title: {fix['suggested_title']}")
            print(f"  Price: {fix['suggested_price']}")
            print(f"  Location: {fix['suggested_location']}")
            print(f"  Year/Model: {fix['suggested_year_model']}")
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    print(f"\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
    suggestions = generate_improvement_suggestions(analysis)
    for suggestion in suggestions:
        print(f"  {suggestion}")
    
    print(f"\n‚úÖ –û–±—â–∏–π –≤—ã–≤–æ–¥:")
    print(f"–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {analysis['quality_score']:.1f}% –æ—Ç –∏–¥–µ–∞–ª–∞.")
    if analysis['quality_score'] >= 80:
        print("–ö–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ, —Ç—Ä–µ–±—É—é—Ç—Å—è –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è.")
    elif analysis['quality_score'] >= 60:
        print("–ö–∞—á–µ—Å—Ç–≤–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ, —Ç—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è.")
    else:
        print("–ö–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–æ–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")

if __name__ == "__main__":
    main()
