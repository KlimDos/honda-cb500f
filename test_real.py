#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å–∫—Ä–∞–ø–∏–Ω–≥–æ–º
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from dotenv import load_dotenv
from monitor import CB500Monitor

async def test_real_scraping():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å –æ–¥–Ω–∏–º —Ä–µ–≥–∏–æ–Ω–æ–º"""
    load_dotenv()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
    print("=" * 50)
    
    data_dir = Path("data")
    cookies_path = Path("cookies.json")
    
    if not cookies_path.exists():
        print("‚ùå –§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    monitor = CB500Monitor(data_dir, cookies_path)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω
    original_regions = monitor.SEARCH_REGIONS
    monitor.SEARCH_REGIONS = [original_regions[0]]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–µ–≥–∏–æ–Ω
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    original_queries = monitor.SEARCH_QUERIES
    monitor.SEARCH_QUERIES = ["cb500f"]  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω: {monitor.SEARCH_REGIONS[0].name}")
    print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {monitor.SEARCH_QUERIES[0]}")
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await monitor.run_monitor_cycle()
        print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        current_state = monitor.storage.load_current_state()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(current_state)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        if current_state:
            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
            for i, (listing_id, listing) in enumerate(list(current_state.items())[:3]):
                print(f"  {i+1}. {listing.get('title', 'N/A')} - {listing.get('price_text', 'N/A')}")
                print(f"     üìç {listing.get('location', 'N/A')}")
                print(f"     üîó {listing.get('url', 'N/A')[:50]}...")
                print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_real_scraping())