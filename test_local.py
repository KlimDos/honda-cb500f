#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ CB500F/CB500X
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from dotenv import load_dotenv
from monitor import CB500Monitor

async def test_telegram():
    """–¢–µ—Å—Ç Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    from telegram_notifier import TelegramNotifier
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram...")
    telegram = TelegramNotifier()
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    test_listing = {
        'listing_id': 'test123',
        'title': '2019 Honda CB500F',
        'price_text': '$4,200',
        'location': 'Test Location, NJ',
        'url': 'https://facebook.com/marketplace/item/test123',
        'description': 'Test motorcycle in excellent condition',
        'listed_date': '2 days ago',
        'image': None
    }
    
    try:
        result = await telegram.send_new_listing(test_listing)
        if result:
            print("‚úÖ Telegram —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå Telegram –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞)")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return False

async def test_scraper():
    """–¢–µ—Å—Ç —Å–∫—Ä–∞–ø–µ—Ä–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)"""
    from fb_scraper import FacebookMarketplaceScraper
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∞–ø–µ—Ä–∞...")
    
    cookies_path = Path("cookies.json")
    if not cookies_path.exists():
        print("‚ùå –§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        scraper = FacebookMarketplaceScraper(cookies_path)
        print("‚úÖ –°–∫—Ä–∞–ø–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–µ—Ä–∞: {e}")
        return False

async def test_storage():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    from data_storage import DataStorage
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
    
    try:
        storage = DataStorage(Path("data"))
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = [
            {
                'listing_id': 'test1',
                'title': 'Test Listing 1',
                'price_text': '$4000'
            }
        ]
        
        storage.save_current_state(test_data)
        loaded = storage.load_current_state()
        
        if len(loaded) == 1 and loaded['test1']['title'] == 'Test Listing 1':
            print("‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        return False

async def test_monitor_light():
    """–õ–µ–≥–∫–∏–π —Ç–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞)"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        data_dir = Path("data")
        cookies_path = Path("cookies.json")
        
        if not cookies_path.exists():
            print("‚ùå –§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        monitor = CB500Monitor(data_dir, cookies_path)
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã
        test_price = monitor.extract_price("$4,500")
        if test_price == 4500:
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {test_price}")
            return False
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        test_listing = {
            'title': '2019 Honda CB500F',
            'price_text': '$4,200',
            'description': 'Great bike'
        }
        
        if monitor.is_relevant_listing(test_listing):
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
            return False
        
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CB500F/CB500X –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return
    
    if not chat_id:
        print("‚ùå TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return
    
    print(f"‚úÖ Bot token: {bot_token[:10]}...")
    print(f"‚úÖ Chat ID: {chat_id}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö", test_storage),
        ("–°–∫—Ä–∞–ø–µ—Ä Facebook", test_scraper),
        ("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", test_telegram),
        ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ª–µ–≥–∫–∏–π)", test_monitor_light),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"üìã {test_name}...")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
        print()
    
    # –ò—Ç–æ–≥–∏
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("-" * 30)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    else:
        print(f"\n‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")

if __name__ == "__main__":
    asyncio.run(main())
